services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      # Mount certificates directory (only used in HTTPS mode)
      - ./certs:/app/certs
    environment:
      - CHOKIDAR_USEPOLLING=true  # Enable hot reload in Docker
      - WATCHPACK_POLLING=true
      - HTTPS_ENABLED=${HTTPS_ENABLED:-false}
      - NODE_ENV=development
    networks:
      - rekindle-network
    command: ${DOCKER_COMMAND:-npm run dev}
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload
      - ./backend:/app
      # Preserve virtual environment
      - /app/.venv
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - ./backend/.env
    networks:
      - rekindle-network
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - rekindle-network

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app
      - /app/.venv
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - ./backend/.env
    networks:
      - rekindle-network
    depends_on:
      - redis
    command: uv run celery -A app.workers.celery_app worker --loglevel=info

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
      - /app/.venv
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - ./backend/.env
    networks:
      - rekindle-network
    depends_on:
      - redis
    command: uv run celery -A app.workers.celery_app flower --port=5555

networks:
  rekindle-network:
    driver: bridge